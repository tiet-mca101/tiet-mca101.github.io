#+startup: beamer
#+title: mca101 : computer graphics
#+subtitle: 2d geometry representation
#+email: bv.raghav@thapar.edu
#+options: H:3 toc:nil author:nil date:nil

#+include: preamble.org
#+beamer_header: \setbeamercovered{transparent}

* 2d geometry --- introduction

** Straight Lines

*** $y = mx + c$

\begin{align}
  \notag
  y = f(x) &= mx + c
\end{align}

#+attr_latex: :width 0.3\linewidth
[[file:images/st-line.png]]

*** parametric form

****                                                           :B_columns:
:PROPERTIES:
:BEAMER_env: columns
:END:

*****                                                    :B_column:BMCOL:
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: .5
:END:
For any two vectors $\mathbf{u},\mathbf{v}\in V$, a
point on the line segment joining them is given
parameterised by $t\in[0,1]$, as

\begin{align}
  \notag
  \mathbf{p} = f(t) &= (1-t)\mathbf{u} + t\mathbf{v}
\end{align}

*** parametric form

****                                                           :B_columns:
:PROPERTIES:
:BEAMER_env: columns
:END:

*****                                                    :B_column:BMCOL:
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: .5
:END:
Any point on a line in the direction of unit vector
$\mathbf{u}:\|\mathbf{u}\|_2^2=1$, and an incident
point $\mathbf{p}_0$ may be given parameterised by
$t\in\mathbb{R}$ as,

\begin{align}
  \notag
  \mathbf{p} = f(t) &= \mathbf{p}_0 + t\mathbf{u}
\end{align}

*** hesse normal form

****                                                           :B_columns:
:PROPERTIES:
:BEAMER_env: columns
:END:

*****                                                    :B_column:BMCOL:
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: .5
:END:

#+attr_latex: :width 0.7\linewidth
[[file:images/Hesse_normalenform.svg.png]]

Distance from the origin $O$ to the line $E$ calculated
with the Hesse normal form. Normal vector in red, line
in green, point O shown in blue.

*****                                                    :B_column:BMCOL:
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: .6
:END:

Given, \\
Normal to the line
$\mathbf{n}_0:\|\mathbf{n}_0\|_2^2=1$, and \\
its distance from origin, $d$;

\vspace{\baselineskip}
The point on the line is given implicitly as the locus
of all points $\mathbf{p}$ that satisfy,

\begin{align}
  \notag
  \mathbf{n}_0 \cdot \mathbf{p} - d &= 0
\end{align}

** Conics


*** circle

****                                                           :B_columns:
:PROPERTIES:
:BEAMER_env: columns
:END:

*****                                                    :B_column:BMCOL:
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: .4
:END:

#+caption: Image Courtesy: [[https://en.wikipedia.org/wiki/File:Circle-withsegments.svg][Wikipedia]]
[[file:images/Circle-withsegments.svg.png]]

*****                                                    :B_column:BMCOL:
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: .6
:END:
Implicit Form:
\begin{align}
  \notag
  f\left(\begin{matrix}x\\y\end{matrix}\right)
  &= x^2 + y^2 - r^2 = 0
\end{align}

Parametric Form:
\begin{align}
  \notag
  f(r,t)
  &= \begin{bmatrix}r\cos t\\r\sin t\end{bmatrix}
\end{align}
*** ellipse

****                                                           :B_columns:
:PROPERTIES:
:BEAMER_env: columns
:END:

*****                                                    :B_column:BMCOL:
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: .4
:END:

#+caption: Image Courtesy: [[https://commons.wikimedia.org/wiki/File:Ellipse-param.svg][Wikipedia]]
[[file:images/Ellipse-param.svg.png]]

*****                                                    :B_column:BMCOL:
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: .6
:END:
Standard form
\begin{align}
  \notag
  f\left( \begin{matrix}x\\y\end{matrix} \right)
  &= \frac{x^2}{a^2} + \frac{y^2}{b^2} - 1 = 0
\end{align}

Parametric Form
\begin{align}
  \notag
  f(t;a,b) &= \begin{bmatrix}
    a\cos t \\ b \sin t
  \end{bmatrix}
\end{align}


* mid-point algorithm

** Fundamentals

*** problem

In a quantised (pixelated or discrete) 2d plane, find
the set of points that visually approximate a given
curve, say a straight line or a conic.

*** method

****                                                           :B_columns:
:PROPERTIES:
:BEAMER_env: columns
:END:

*****                                                    :B_column:BMCOL:
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: .5
:END:
Iteratively, increment along one axes, \\
with respect to which, the slope of the curve is
gentle.

#+latex: {\vspace{\baselineskip}}
Decide whether it is required to increment along the
perpendicular axis or not.

#+latex: {\vspace{\baselineskip}}
Increment if required.

*** example
#+attr_latex: :width 0.8\linewidth
[[file:images/basic-midpoint-algo.png]]
  
*** example
#+attr_latex: :width \linewidth
[[file:images/0--mid-point-algo_annotated.png]]

*** conditions for application of mid-point algorithm

****                                                           :B_columns:
:PROPERTIES:
:BEAMER_env: columns
:END:

*****                                                    :B_column:BMCOL:
:PROPERTIES:
:BEAMER_env: column
:BEAMER_col: .45
:END:
Mid-point algorithm is applicable to a curve within a
given finite interval, *iff*

1. The curve increases monotonically;
2. The curve increases gradually.


In other words,
\begin{align}
  \notag
  0 &\leqslant \mathrm{d}y \leqslant \mathrm{d}x
\end{align}

*** generic algo

\begin{algorithm}[H]
  \caption{Generic Mid-point Algorithm}
  \DontPrintSemicolon
  \KwIn{$x_0,x_{\mathrm{max}}\in\mathbb{Z}$\hfill\scriptsize
    Start and end x-coordinates.}

  \KwIn{$F:\mathbb{R}^2\to\mathbb{R}$ \hfill
    \scriptsize Signed Distance Function from the curve.}

  \KwOut{$C \equiv
    \{\mathbf{p}_0,\ldots,\mathbf{p}_{\mathrm{max}} \}
    \subset \mathbb{Z}^2$ \hfill \scriptsize Curve in
    discrete 2D space.}

  {$\mathbf{p}_0 \gets \begin{bmatrix} x_0 \\ \lceil
    y_0\rceil \end{bmatrix} \vdash F\left(\begin{matrix}
      x_0 \\ y_0 \end{matrix}\right) = 0$}


\For{$t\in\{1,\ldots,\mathrm{max}\}$}{
  $\mathbf{p}_{\mathrm{mid}}\gets\mathbf{p}_{t-1}+\begin{pmatrix}1\\
    \frac12\end{pmatrix}$

  $\delta_t\gets I[F(\mathbf{p}_{\mathrm{mid}})<0]$

  $\mathbf{p}_{t}\gets\mathbf{p}_{t-1}+\begin{pmatrix}
    1 \\ \delta_{t} \end{pmatrix}$
  }
\end{algorithm}


** Straight Line

*** characterising straight lines

\begin{align*}
  F(x,y)
  &= Ax-By+C \\
  0 \leqslant \mathrm{d}y / \mathrm{d}x \leqslant 1 \quad
  &\mapsto \quad 0 \leqslant A \leqslant B
  &&\textsc{\ldots case 1} \\
  -1 \leqslant \mathrm{d}y / \mathrm{d}x \leqslant 0 \quad
  &\mapsto \quad 0 \leqslant A \leqslant -B
  &&\textsc{\ldots case 2} \\
  0 \leqslant \mathrm{d}x / \mathrm{d}y \leqslant 1 \quad
  &\mapsto \quad 0 \leqslant B \leqslant A
  &&\textsc{\ldots case 3} \\
  -1 \leqslant \mathrm{d}x / \mathrm{d}y \leqslant 0 \quad
  &\mapsto \quad 0 \leqslant -B \leqslant A
  &&\textsc{\ldots case 4}
\end{align*}

*** mid-point algo for st. line

# \usepackage[linesnumbered,ruled,vlined]{algorithm2e}
\begin{algorithm}[H]
  \caption{Mid-Point Algorithm for Straight Line (intermediate attempt)}
  \DontPrintSemicolon
  \KwIn{$x_0,x_{\mathrm{max}}\in\mathbb{Z}$\hfill\scriptsize
    Start and end x-coordinates.}

  \KwIn{$a,b,c\in\mathbb{Z} \vdash 0\leqslant a < b;
    b\;\mathrm{even}$ \hfill \scriptsize Coefficients:
    $F(x,y)=ax-by+c$. \textbf{Rem:} \alert{$-by$}.}

  \KwOut{$C \equiv
    \{(x_0,y_0),\ldots,(x_{\mathrm{max}},y_{\mathrm{max}})
    \} \subset \mathbb{Z}^2$ \\\scriptsize An ordered
    sequence; a curve in discrete 2D space.}

  $y_0\gets\lceil\frac{ax_0+c}{b}\rceil$
  
  $\delta_0\gets ax_0-by_0- \frac b2 +c$
  \hfill{\scriptsize \textbf{Rem:}
    \alert{$-by_0 - \frac b2$}; $\frac b2\in\mathbb{Z}$
    because $b$ even.}

  \For{$t\in\{1,\ldots,\mathrm{max}\}$}{
    $x_t\gets x_{t-1} + 1$

    $\delta_t\gets \delta_{t-1} + a -
    b\cdot I[\delta_{t-1}<0]$

    $y_t \gets y_{t-1} + I[\delta_t<0]$
  }
\end{algorithm}

*** mid-point algo for st. line

# \usepackage[linesnumbered,ruled,vlined]{algorithm2e}
\begin{algorithm}[H]
  \caption{Mid-Point Algorithm for Straight Line}
  \DontPrintSemicolon
  \KwIn{$x_0,x_{\mathrm{max}}\in\mathbb{Z}$\hfill\scriptsize
    Start and end x-coordinates.}

  \KwIn{$a,b,c\in\mathbb{Z} \vdash 0\leqslant a < b;
    b\;\mathrm{even}$ \hfill \scriptsize Coefficients:
    $F(x,y)=ax-by+c$. \textbf{Rem:} \alert{$-by$}.}

  \KwOut{$C \equiv
    \{(x_0,y_0),\ldots,(x_{\mathrm{max}},y_{\mathrm{max}})
    \} \subset \mathbb{Z}^2$ \\\scriptsize An ordered
    sequence; a curve in discrete 2D space.}

  \textbf{Init:} $C$ as a new Array.

  \textbf{Init:} $x,y,\delta$ as integers.

  $x\gets x_0$

  $y\gets\lceil\frac{ax+c}{b}\rceil$
  
  $\delta\gets ax-by- \frac b2 +c$
  \hfill{\scriptsize \textbf{Rem:}
    \alert{$-by - \frac b2$}; $\frac b2\in\mathbb{Z}$
    because $b$ even.}

  $C\cdot$ Push($(x,y)$)

  \For{$t\in\{1,\ldots,\mathrm{max}\}$}{
    $x\gets x + 1$

    $\delta\gets \delta + a -
    b\cdot I[\delta<0]$

    $y \gets y + I[\delta<0]$

    $C\cdot$ Push($(x,y)$)
  }
\end{algorithm}

*** 
** Circle

***                                                          :B_againframe:
:PROPERTIES:
:BEAMER_env: againframe
:BEAMER_ref: *generic algo
:BEAMER_act:
:END:

*** 
